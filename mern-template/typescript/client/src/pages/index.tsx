import { MovieCard } from "@/components/movie/MovieCard";
import { IMovie } from "@/interfaces/movie";
import Head from "next/head";
import { useRouter } from "next/router";
import axios from "axios";
import { GetServerSidePropsContext } from "next";
import useLoader from "@/hooks/useLoader";
import { Select } from "@/components/ui/Select";
import { MovieCardSkelton } from "@/components/movie/MovieCardSkeleton";
import { nanoid } from "nanoid";
import { useQuery } from "@/hooks/useQuery";

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { query } = context;
  const { ordering = "", limit = 24 } = query;
  const response = await axios.get(
    `http://localhost:7070/api/movies?limit=${limit}&ordering=${ordering}`
  );
  const { data } = response;
  return {
    props: { data },
  };
}

export default function Home({ data }: { data: IMovie[] }): JSX.Element {
  const movies = data;

  const router = useRouter();
  const { query } = router;
  const { ordering = "", limit = 24 } = query;

  const loading = useLoader();

  const { addQuery } = useQuery();

  return (
    <>
      <Head>
        <title>Movies</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div className="bg-slate-100 min-h-screen">
        <div className="container">
          <div className="bg-white">
            <Select
              items={[
                { value: "", label: "Sort..." },
                { value: "releasedAsc", label: "Oldest" },
                { value: "releasedDesc", label: "Newest" },
                { value: "imdbRatingDesc", label: "Most popular" },
                { value: "titleAsc", label: "A-Z" },
                { value: "titleDesc", label: "Z-A" },
              ]}
              onChange={(e) => {
                addQuery({ ordering: e.target.value });
              }}
              value={ordering + ""}
              itemValue={"value"}
              itemLabel={"label"}
            />

            <Select
              items={[
                { value: "6", label: "6" },
                { value: "12", label: "12" },
                { value: "24", label: "24" },
                { value: "48", label: "48" },
              ]}
              onChange={(e) => {
                addQuery({ limit: e.target.value });
              }}
              value={limit + ""}
              itemValue={"value"}
              itemLabel={"label"}
            />

            <div className="p-4 grid gap-4 md:grid-cols-6 sm:grid-cols-4 grid-cols-2">
              {!loading
                ? movies.map((movie) => (
                    <MovieCard movie={movie} key={movie._id} />
                  ))
                : Array.from(Array(Number(limit)), () => (
                    <MovieCardSkelton key={nanoid()} />
                  ))}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
